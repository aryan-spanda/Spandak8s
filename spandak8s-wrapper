#!/usr/bin/env python3
"""
Spandak8s CLI - Environment-Aware Entry Point

This wrapper automatically uses the backend virtual environment to ensure
all dependencies are available when running CLI commands.
"""

import sys
import os
import subprocess
from pathlib import Path

def get_backend_python():
    """Get the path to Python executable in backend virtual environment"""
    script_dir = Path(__file__).parent
    backend_dir = script_dir / "backend"
    
    # Windows venv path
    venv_python = backend_dir / "venv" / "Scripts" / "python.exe"
    if venv_python.exists():
        return str(venv_python)
    
    # Linux/Mac venv path  
    venv_python = backend_dir / "venv" / "bin" / "python"
    if venv_python.exists():
        return str(venv_python)
    
    return None

def main():
    """Main entry point that delegates to backend Python environment"""
    backend_python = get_backend_python()
    
    if not backend_python:
        print("‚ùå Backend virtual environment not found!")
        print("üîß Please run the backend setup first:")
        print("   cd backend")
        print("   python -m venv venv")
        print("   .\\venv\\Scripts\\Activate.ps1  # Windows")
        print("   # or source venv/bin/activate  # Linux/Mac")
        print("   pip install -r requirements-hybrid.txt")
        sys.exit(1)
    
    # Get the original CLI script
    script_dir = Path(__file__).parent
    original_cli = script_dir / "spandak8s-original"
    
    if not original_cli.exists():
        print("‚ùå Original CLI script not found!")
        sys.exit(1)
    
    # Execute the original CLI using backend Python
    cmd = [backend_python, str(original_cli)] + sys.argv[1:]
    
    try:
        result = subprocess.run(cmd, check=False)
        sys.exit(result.returncode)
    except Exception as e:
        print(f"‚ùå Error running CLI: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
